
Read config from file on:
	plugin start
	autocmd VimEnter
	ReadConfig()

Save macros to file on:
	SaveConfig()
	autocmd QuitPre

Save macros to memory on:
	SaveToMemory()
	autocmd WinLeave
	keypress q, etc

Config
	verbose errors

Macro window mappings
	mustn't interfere with navigation or editing

	q     quit
	<esc> quit
	<f1>  help
	c     commit changes to memory
	s     save changes to file
	r     read macros from file
	r     refresh?
	p     pin macro to register (move skips this reg)
	l     lock == pin
	x     execute macro on alternate buffer
	<cr>  execute
	d     disable (toggle) => comment it out

Like git rebase:
	reorder list
	add items
	delete items
	edit items
	commit
		sync to memory registers
		fix regnames
		mark as not modified
		ignore comments
		ignore blank lines

Trap autocmds, then auto-commit to memory (and fix reg names)
	InsertEnter
	InsertChange
	InsertLeave
	use undotree() info to detect changes?

How can I detect other changes to registers?
	Probably can't
	Just sync internal list to registers before every function call

How can multiple running copies of vim coordinate?
	cf wviminfo, rviminfo
	need to delete the buffer after closing to prevent swapfile collision

Syntax for macro window
	^[-a-zA-Z]\**	.*
	match regex to register config

Option
	move pinned macros to end of list
	don't give the focus to a split window

to prevent accidents?
	map q <nop>
no, need to trap it so I know when a recording finishes

need to map
	qa startmacro() rotate first
	qA startmacro() no rotate

don't rotate empty registers?

refresh to update indices

if a macro is locked, ignore changes in the register
	'K' is locked
	@k has changed
	on 'Sync', read registers into variable (skipping locked)
	push variable back into registers

edit mode
	strip system comments?
	strip blank lines?
	strip letter-locked-tab
	intercept :q :quit ZZ to leave edit mode
	intercept :w etc to commit changes
	edit mode mappings? (for what?)

use comments for naming macros

de-dupe macros (make it easier to manage)

on 'start recording' update macro window to [RECORDING]
	change sign too?

have a q-<esc> mapping to abort a recording?
	would interfere with q-getchar()

speed up window population
	create first (including comments)
	then create window
	populate

Intercept Q needs to allow any register in our list
and effect the correct "move"
unless the register is locked => error message

localleader (config option)

example autocmd for the user to set things
	bufenter __mnemosyne__ ?

edit mode
	enter edit mode
	hide sign column?
	do stuff
	leave edit more OR leave window
		sync to var
		sync to regs
how do I track the locked-ness if:
	the number of lines changes
	the order of lines changes
	track 'marks' -- limits me to 26 locked registers
	unless I sync the locked-ness after every change
listen for cursormoved
	if b:changedtick has changed sync to vars

